<div class='h-fu'>

<% if @post.images.attached? || @post.video_url.present? %>
  <button class="back-button mb-4 py-2 px-4 text-gray-500 rounded hover:text-gray-800 mt-5" onclick="window.history.back()">< Back</button>

  <div class="max-w-2xl mx-auto p-4 h-full">
    <h3 class="text-4xl text-center font-bold mb-2"><%= @post.title %></h3>

    <p class="text-center mb-4 text-gray-400">
      <% if @post.updated_at = @post.created_at %>
        Posted on: <%= @post.updated_at.strftime("%d %B %Y") %>
      <% else %>
        Created on: <%= @post.created_at.strftime("%d %B %Y") %>
      <% end %>
    </p>

    <% if session[:user_id] %>
      <% user = User.find_by(id: session[:user_id]) %>
      <% if user&.admin? %>
        <div class="mb-4 justify-center flex gap-3">
          <%= link_to "Edit", edit_post_path(@post), class: "bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-700" %>
          <%= button_to "Delete", post_path(@post), method: :delete, data: { confirm: "Delete this post?" }, class: "bg-red-500 text-white py-2 px-4 rounded hover:bg-red-600" %>
        </div>
      <% end %>
    <% end %>

    <div class="carousel relative">
      <div class="carousel-track-container overflow-hidden w-full">
        <div class="carousel-track flex transition-transform duration-300 ease-in-out rounded-xl">
        
        <% if @post.video_url.present? %>
        <div class="carousel-slide min-w-full flex justify-center items-center bg-black">
          <% video_id = @post.video_url.split("v=").last %>
          <iframe class="rounded-xl carousel-video w-full h-full" 
                  src="https://www.youtube.com/embed/<%= video_id %>" 
                  frameborder="0" 
                  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" 
                  allowfullscreen>
          </iframe>
        </div>
        <% end %>

        <% if @post.images.attached? %>
          <% @post.images.each do |image| %>
            <div class="carousel-slide min-w-full flex justify-center items-center bg-black">
              <%= image_tag image, class: "carousel-image object-cover w-full max-h-[500px]" %>
            </div>
          <% end %>
        <% end %>
        </div>
      </div>
    
      <!-- Кнопки навигации -->
      <% if @post.images.count + (@post.video_url.present? ? 1 : 0) > 1 %>
        <button class="carousel-button carousel-button-left absolute left-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded hover:bg-opacity-70">&lt;</button>
        <button class="carousel-button carousel-button-right absolute right-2 top-1/2 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded hover:bg-opacity-70">&gt;</button>
      <% end %>
    </div>

    <!-- Индикаторы карусели - выносим их под карусель -->
    <div class="carousel-indicators flex justify-center space-x-2 mt-4">
      <% @post.images.each_with_index do |image, index| %>
        <button class="carousel-dot w-3 h-3 bg-slate-600 rounded-full opacity-50 hover:opacity-100 transition-all duration-300" data-index="<%= index %>"></button>
      <% end %>
      <% if @post.video_url.present? %>
        <button class="carousel-dot w-3 h-3 bg-slate-600 rounded-full opacity-50 hover:opacity-100 transition-all duration-300" data-index="<%= @post.images.count %>"></button>
      <% end %>
    </div>

    <p class='text-2xl mt-2 font-semibold'>Description</p>

    <div class="post-info mt-4 bg-gray-100 p-3 rounded-md text-gray-700 mb-20 text-start">
    <p class="text-md"><%= simple_format(@post.description) %></p>
  </div>
  
  </div>
<% end %>
</div>

<script>
document.addEventListener("DOMContentLoaded", () => {
  const track = document.querySelector(".carousel-track");
  const slides = Array.from(track.children);
  const nextButton = document.querySelector(".carousel-button-right");
  const prevButton = document.querySelector(".carousel-button-left");
  const indicators = document.querySelectorAll(".carousel-dot");

  // Если изображений или видео один, скрыть кнопки
  if (slides.length <= 1) {
      if (nextButton) nextButton.style.display = "none";
      if (prevButton) prevButton.style.display = "none";
      return; // Если один слайд, карусель не нужна
  }

  let slideWidth;

  const initializeSlides = () => {
      slideWidth = slides[0].getBoundingClientRect().width;

      // Расположение слайдов
      slides.forEach((slide, index) => {
          slide.style.left = slideWidth * index + "px";
      });

      // Устанавливаем первый слайд как текущий
      slides[0].classList.add("current-slide");
      updateIndicators(0); // Обновление индикатора для первого слайда
  };

  const moveToSlide = (track, currentSlide, targetSlide) => {
      if (!targetSlide) return;
      track.style.transform = "translateX(-" + targetSlide.style.left + ")";
      currentSlide.classList.remove("current-slide");
      targetSlide.classList.add("current-slide");
  };

  // Обновление индикаторов
  const updateIndicators = (index) => {
      indicators.forEach((dot, i) => {
          if (i === index) {
              dot.classList.add("bg-blue-500"); // Активный индикатор
          } else {
              dot.classList.remove("bg-blue-500"); // Неактивные индикаторы
          }
      });
  };

  // Кнопка "Вперёд"
  nextButton.addEventListener("click", () => {
      const currentSlide = track.querySelector(".current-slide");
      const nextSlide = currentSlide.nextElementSibling;

      moveToSlide(track, currentSlide, nextSlide);
      const currentIndex = slides.indexOf(nextSlide);
      updateIndicators(currentIndex);
  });

  // Кнопка "Назад"
  prevButton.addEventListener("click", () => {
      const currentSlide = track.querySelector(".current-slide");
      const prevSlide = currentSlide.previousElementSibling;

      moveToSlide(track, currentSlide, prevSlide);
      const currentIndex = slides.indexOf(prevSlide);
      updateIndicators(currentIndex);
  });

  // Индикатор переключения
  indicators.forEach((dot, index) => {
      dot.addEventListener("click", () => {
          const currentSlide = track.querySelector(".current-slide");
          const targetSlide = slides[index];

          moveToSlide(track, currentSlide, targetSlide);
          updateIndicators(index);
      });
  });

  // Подождите, пока все изображения загрузятся
  const images = document.querySelectorAll(".carousel-image");
  const promises = Array.from(images).map(img => new Promise(resolve => {
      if (img.complete) resolve();
      else img.onload = resolve;
  }));

  Promise.all(promises).then(() => {
      initializeSlides();
  });

  // Обновляем размеры слайдов при изменении размера окна
  window.addEventListener("resize", () => {
      initializeSlides();
  });
});
</script>
